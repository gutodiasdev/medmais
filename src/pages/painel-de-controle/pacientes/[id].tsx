import { Button, Flex, Heading, Spinner } from '@chakra-ui/react'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { parseCookies } from 'nookies'

import { fetchSinglePatient } from '@/application/helpers'
import {
  DashboardLayout,
  SinglePatientPage
} from '@/presentation/components'
import { useRouter } from 'next/router'
import { useQuery } from 'react-query'

type QueryProps = {
  id: string
}

export default function PatientSinglePage () {
  const { id } = useRouter().query as QueryProps

  const { data, isLoading, isError } = useQuery(['patient', id],
  async () => await fetchSinglePatient({ patientId: id }),
  {
    staleTime: 1000 * 60 * 5
  }
  )

  return (
    <>
      <Head>
        <title>MedMais - Painel de administração clínica</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <DashboardLayout>
        <Flex alignItems={'center'} width={'100%'} justifyContent={'space-between'}>
          <Heading as='h1' fontSize={'xl'} color={'gray.600'}>
            Paciente
          </Heading>
          <Button
            variant={'outline'}
            colorScheme={'teal'}
            as={Link}
            href={'/painel-de-controle/pacientes'}
          >
            Voltar
          </Button>
        </Flex>

          {
            isLoading ? (
              <Flex
                width={'100%'}
                justifyContent={'center'}
              >
                <Spinner />
              </Flex>
            ) : isError ? (
              <Flex
                width={'100%'}
                justifyContent={'center'}
              >
                <Heading as='h1' fontSize={'xl'} color={'gray.600'}>
                  Ocorreu algum erro.
                </Heading>
              </Flex>
            ) : (
              <SinglePatientPage data={data} />
            )
          }
      </DashboardLayout>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const cookies = parseCookies(ctx)

  if (cookies['medmais.access_token'] === undefined) {
    return {
      redirect: {
        destination: '/login-necessario',
        permanent: false
      }
    }
  }

  return {
    props: {}
  }
}