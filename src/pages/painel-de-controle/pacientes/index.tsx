import {
  Box,
  Button,
  Flex,
  FormControl,
  Heading,
  HStack, IconButton, Input,
  Spinner,
  Table,
  Tbody,
  Td,
  Th,
  Thead,
  Tooltip,
  Tr,
  useDisclosure,
  useToast
} from '@chakra-ui/react'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { parseCookies } from 'nookies'
import { useState } from 'react'
import { AiOutlineEdit, AiOutlineEye } from 'react-icons/ai'
import { BiTrashAlt } from 'react-icons/bi'
import { RxUpdate } from 'react-icons/rx'
import { useQuery } from 'react-query'

import { fetchPatientSearch } from '@/application/helpers'
import { PatientsResponse } from '@/domain/models'
import { api } from '@/infra/config'
import {
  CreatePatientModal,
  DashboardLayout,
  DeletePatientModal, ViewPatientModal
} from '@/presentation/components'
import Link from 'next/link'

export default function DashboardPatients () {
  const toast = useToast()
  const [searchTerm, setSearchTerm] = useState<string>()
  const [userId, setUserId] = useState<string>()
  const [foundPatients, setFoundPatients] = useState<PatientsResponse[]>()
  const { isOpen, onOpen, onClose } = useDisclosure()
  const deleteUserModal = useDisclosure()
  const viewUserModal = useDisclosure()
  const editUserModal = useDisclosure()

  const handlePatientSearch = async () => {
    if (searchTerm === '') {
      toast({
        status: 'warning',
        description: 'Você precisa inserir uma informação na busca!',
        duration: 1000
      })
    } else {
      const patientsFound = await fetchPatientSearch(searchTerm)
      setFoundPatients(patientsFound)
      return patientsFound
    }
  }

  const fetchPatients = async () => {
    const { data } = await api.get<PatientsResponse[]>('/api/patient/list')
    return data
  }

  const { data, isLoading, isError, refetch, isRefetching } = useQuery('patients', fetchPatients, {
    staleTime: 1000 * 60 * 60 * 24,
  })

  const handleRefectch = async () => {
    await refetch({ queryKey: 'patients' })
  }

  return (
    <>
      <Head>
        <title>MedMais - Painel de administração clínica</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <CreatePatientModal isOpen={isOpen} onClose={onClose} />
      <DashboardLayout>
        <Flex alignItems={'center'} width={'100%'} justifyContent={'space-between'}>
          <Heading as='h1' fontSize={'xl'} color={'gray.600'}>
            Pacientes
          </Heading>
          <Button
            variant={'outline'}
            colorScheme={'teal'}
            onClick={onOpen}
          >
            Adicionar paciente
          </Button>
        </Flex>
        <Flex as='form' margin={'16px 0'} gap={'8px'} maxWidth={{ lg: '70%' }}>
          <FormControl>
            <Input type='text' onChange={(e) => setSearchTerm(e.target.value)} />
          </FormControl>
          <Button
            color={'white'}
            backgroundColor={'teal.400'}
            _hover={{
              backgroundColor: 'teal.500'
            }}
            onClick={handlePatientSearch}
            boxShadow={{ lg: 'lg'}}

          >
            Procurar
          </Button>
        </Flex>
        <Flex
          alignItems={'center'}
          width={'100%'}
          justifyContent={'flex-end'}
          paddingY={2}
          gap={2}
        >
          <Button
            variant={'outline'}
            colorScheme={'teal'}
            onClick={() => setFoundPatients(undefined)}
            leftIcon={<RxUpdate />}
            size={'xs'}
          >
            Limpar busca
          </Button>
          <Button
            colorScheme={'teal'}
            onClick={handleRefectch}
            leftIcon={<RxUpdate />}
            size={'xs'}
            isLoading={isRefetching}
          >
            Atualizar
          </Button>
        </Flex>
        <Box
          border={'1px'}
          borderColor={'gray.200'}
          borderRadius={{ lg: 'xl' }}
        >
          {
            isLoading ? (
              <Box padding={4}>
                <Spinner />
              </Box>
            ) : isError ? (
              <Box padding={4}>
                <Heading as='h2' fontSize={'lg'}>
                  Ocorreu um erro ao encontrar os pacientes
                </Heading>
              </Box>
            ) : (data?.length === 0 ) ? (
              <Box padding={4}>
                <Heading as='h2' fontSize={'lg'} color={'gray.600'}>
                  Você ainda não possui pacientes cadastrados
                </Heading>
              </Box>
            ) : (
              <Table>
                <Thead>
                  <Tr>
                    <Th>Nome</Th>
                    <Th>Documento</Th>
                    <Th></Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {
                    (foundPatients !== undefined) ? (
                      foundPatients?.map((item, index) => {
                        return (
                          <Tr key={index}>
                            <Td width={'65%'}>{item.name}</Td>
                            <Td>{item.rg}</Td>
                            <Td>
                              <HStack
                                justifyContent={'flex-end'}
                              >
                                <Tooltip label={'Ver paciente'} borderRadius={'md'}>
                                  <IconButton
                                    aria-label='view-patient'
                                    title='teste'
                                    size={{ lg: 'sm' }}
                                  >
                                    <AiOutlineEye />
                                  </IconButton>
                                </Tooltip>
                                <Tooltip label={'Editar paciente'} borderRadius={'md'}>
                                  <IconButton
                                    aria-label='edit-patient'
                                    size={{ lg: 'sm' }}
                                  >
                                    <AiOutlineEdit />
                                  </IconButton>
                                </Tooltip>
                                <Tooltip label={'Excluir paciente'} borderRadius={'md'} bg={'red'}>
                                  <IconButton
                                    aria-label='edit-patient'
                                    size={{ lg: 'sm' }}
                                  >
                                    <BiTrashAlt />
                                  </IconButton>
                                </Tooltip>
                              </HStack>
                            </Td>
                          </Tr>
                        )
                      })
                    ) : (
                      data?.map((patient, index) => {
                        return (
                          <Tr key={index}>
                            <Td width={'65%'}>{patient.name}</Td>
                            <Td>{patient.rg}</Td>
                            <Td>
                              <HStack
                                justifyContent={'flex-end'}
                              >
                                <Tooltip label={'Ver paciente'} borderRadius={'md'}>
                                  <IconButton
                                    as={Link}
                                    href={`/painel-de-controle/pacientes/${patient.id}`}
                                    aria-label='edit-patient'
                                    size={{ lg: 'sm' }}
                                  >
                                    <AiOutlineEye />
                                  </IconButton>
                                </Tooltip>
                                <Tooltip label={'Excluir paciente'} borderRadius={'md'} bg={'red'}>
                                  <IconButton
                                    aria-label='edit-patient'
                                    size={{ lg: 'sm' }}
                                    onClick={() => {
                                      setUserId(patient.id)
                                      deleteUserModal.onOpen()
                                    }}
                                  >
                                    <BiTrashAlt />
                                  </IconButton>
                                </Tooltip>
                              </HStack>
                            </Td>
                          </Tr>
                        )
                      })
                    )
                  }
                </Tbody>
              </Table>
            )
          }
        </Box>
      </DashboardLayout>
      <DeletePatientModal isOpen={deleteUserModal.isOpen} onClose={deleteUserModal.onClose} userId={userId} />
      <ViewPatientModal isOpen={viewUserModal.isOpen} onClose={viewUserModal.onClose} userId={userId} />
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const cookies = parseCookies(ctx)

  if (cookies['medmais.access_token'] === undefined) {
    return {
      redirect: {
        destination: '/login-necessario',
        permanent: false
      }
    }
  }

  return {
    props: {}
  }
}